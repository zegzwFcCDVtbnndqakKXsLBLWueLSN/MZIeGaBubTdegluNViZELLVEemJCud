--[[
    
    if (not syn) then
        return
    end

    if (game.PlaceId ~= 9570110925) then
        return
    end

    repeat 
        task.wait()
    until game:IsLoaded()

    _G.zhBFHsauqvKRGBYlnsaJlTsiyqNjYOUT = 'rnUDAhyLEvlwrcotadTsOQFIJzhCXRfq'

    local Title = 'mainstreamed ts | [trident survival] - Open Beta'

    --//Macros
    if (not LPH_OBFUSCATED) then
        LPH_JIT = function(...) return ... end
        LPH_JIT_MAX = function(...) return ... end
        LPH_NO_VIRTUALIZE = function(...) return ... end
        LPH_NO_UPVALUES = function(f) return(function(...) return f(...) end) end
        LPH_ENCSTR = function(...) return ... end
        LPH_STRENC = function(...) return ... end
        LPH_HOOK_FIX = function(...) return ... end
        LPH_CRASH = function() return print(debug.traceback()) end
    end

    --//Loadstrings
    local repo = 'https://raw.githubusercontent.com/Mainstreamed/Linoria/main/'
    local Library = loadstring(game:HttpGet(repo..'Library.lua'))()
    local ThemeManager = loadstring(game:HttpGet(repo..'ThemeManager.lua'))()
    local SaveManager = loadstring(game:HttpGet(repo..'SaveManager.lua'))()

    --//Services
    local Workspace = game:GetService('Workspace')
    local Terrain = Workspace:FindFirstChildOfClass('Terrain')
    local Players = game:GetService('Players')
    local SoundService = game:GetService('SoundService')
    local RunService = game:GetService('RunService')
    local UserInputService = game:GetService('UserInputService')
    local HttpService = game:GetService('HttpService')
    local Lighting = game:GetService('Lighting')
    local NetworkClient = game:GetService('NetworkClient')
    local UserGameSettings = UserSettings():GetService('UserGameSettings')
    local ContextActionService = game:GetService('ContextActionService')
    local ReplicatedStorage = game:GetService('ReplicatedStorage')
    local ReplicatedPlayers = ReplicatedStorage:FindFirstChild('Players')
    local CoreGui = game:GetService('CoreGui')
    local GuiService = game:GetService('GuiService')

    --//Localisation
    local drawing_new, instance_new = Drawing.new, Instance.new
    local color3_new, color3_fromrgb = Color3.new, Color3.fromRGB
    local vector3_new, vector2_new, cframe_new = Vector3.new, Vector2.new, CFrame.new
    local math_huge, math_floor, math_ceil, math_max, math_min, math_random, math_tan, math_rad = math.huge, math.floor, math.ceil, math.max, math.min, math.random, math.tan, math.rad
    local ray_new = Ray.new

    --//Other Variables
    local camera = Workspace.CurrentCamera
    local local_player = Players.LocalPlayer
    local mouse = local_player:GetMouse()
    local viewportsize = camera.ViewportSize

    --//Trident Variables
    local ignore = Workspace.Ignore
    local local_character = ignore.LocalCharacter
    local fps_arms = ignore.FPSArms
    local item_configs = ReplicatedStorage.ItemConfigs
    local remote_event = local_player.PlayerGui.RemoteEvent

    --//Trident Functions
    local functions = {
        recoil = _camera.Recoil,
        setswayvelocity = _camera.setSwayVelocity,
        setarmsoffset = _camera.SetArmsOffset,
        getcframe = _camera.GetCFrame,
        isgrounded = _character.isGrounded,
        send = _network.Send,
        name = _player.Name,
        create_projectile_ranged = debug.getupvalue(_ranged_weapon, 4),
        create_projectile_bow = debug.getupvalue(_bow, 4),
    }

    local raycast_params = RaycastParams.new()
    raycast_params.FilterType = Enum.RaycastFilterType.Blacklist
    raycast_params.FilterDescendantsInstances = {ignore, camera}
    raycast_params.IgnoreWater = false

    --//Tables Variables
    local weapon_configs = {
        HMAR = require(item_configs.HMAR),
        USP = require(item_configs.USP),
        RPG = require(item_configs.RPG),
        PipePistol = require(item_configs.PipePistol),
        PipeSMG = require(item_configs.PipeSMG),
        Blunderbuss = require(item_configs.Blunderbuss),
        LaserPistol = require(item_configs.LaserPistol),
        Bow = require(item_configs.Bow),
        Crossbow = require(item_configs.Crossbow),
    }

    --//Old Accuracy
    local old_accuracy = {
        HMAR = weapon_configs.HMAR.accuracy,
        USP = weapon_configs.USP.accuracy,
        RPG = weapon_configs.RPG.accuracy,
        PipePistol = weapon_configs.PipePistol.accuracy,
        PipeSMG = weapon_configs.PipeSMG.accuracy,
        Blunderbuss = weapon_configs.Blunderbuss.accuracy,
        LaserPistol = weapon_configs.LaserPistol.accuracy,
        Bow = weapon_configs.Bow.accuracy,
        Crossbow = weapon_configs.Crossbow.accuracy,
    }

    --//Old Fire Types
    local old_firetype = {
        HMAR = weapon_configs.HMAR.fireAction,
        USP = weapon_configs.USP.fireAction,
        RPG = weapon_configs.RPG.fireAction,
        PipePistol = weapon_configs.PipePistol.fireAction,
        PipeSMG = weapon_configs.PipeSMG.fireAction,
        Blunderbuss = weapon_configs.Blunderbuss.fireAction,
        LaserPistol = weapon_configs.LaserPistol.fireAction,
        Bow = weapon_configs.Bow.fireAction,
        Crossbow = weapon_configs.Crossbow.fireAction,
    }

    --//Old recoil
    local old_recoilpattern = {
        HMAR = weapon_configs.HMAR.recoilPattern,
        USP = weapon_configs.USP.recoilPattern,
        RPG = weapon_configs.RPG.recoilPattern,
        PipePistol = weapon_configs.PipePistol.recoilPattern,
        PipeSMG = weapon_configs.PipeSMG.recoilPattern,
        Blunderbuss = weapon_configs.Blunderbuss.recoilPattern,
        LaserPistol = weapon_configs.LaserPistol.recoilPattern,
        Bow = weapon_configs.Bow.recoilPattern,
        Crossbow = weapon_configs.Crossbow.recoilPattern,
    }

    local drawings = {
        snapline = drawing_new('Line'),
        fov_circle = drawing_new('Circle'),
        crosshair = drawing_new('Circle'),
    }

    --//Snapline Drawing
    drawings.snapline.Visible = false
    drawings.snapline.Thickness = 1
    drawings.snapline.Transparency = 1
    drawings.snapline.From = vector2_new(0, 0)
    drawings.snapline.To = vector2_new(0, 0)
    drawings.snapline.Color = color3_new(1, 1, 1)

    --//FOV Circle Drawing
    drawings.fov_circle.Visible = false
    drawings.fov_circle.Filled = false
    drawings.fov_circle.Thickness = 1
    drawings.fov_circle.Radius = 1
    drawings.fov_circle.NumSides = 9999
    drawings.fov_circle.Transparency = 1
    drawings.fov_circle.Position = vector2_new(0, 0)
    drawings.fov_circle.Color = color3_new(1, 1, 1)

    --//Crosshair Drawing
    drawings.crosshair.Visible = false
    drawings.crosshair.Filled = false
    drawings.crosshair.Thickness = 1
    drawings.crosshair.Radius = 1
    drawings.crosshair.NumSides = 9999
    drawings.crosshair.Transparency = 1
    drawings.crosshair.Position = vector2_new(camera.ViewportSize.X / 2, camera.ViewportSize.Y / 2)
    drawings.crosshair.Color = color3_new(1, 1, 1)

    --//Esp Handling
    local esp_handling = {
        text_fonts = {
            System = 1,
            Plex = 2,
            Monospace = 3,
        },
    }

    --//Aiming shit
    local storage = {
        aim = {
            target = nil,
            distance = nil,
            vector2 = nil,
            vector3 = nil,
            pred_vector3 = nil,
            pred_vector2 = nil,
        },
        ['local'] = {
            mouse_location = nil,
            held_item = nil,
            held_instance = nil,
        },
    }


    --//UI Library\\--
    local Window = Library:CreateWindow({
        Title = Title,
        Center = true,
        AutoShow = true,
        Size = UDim2.fromOffset(550, 600),
    })

    --//Tabs\\--
    local tabs = {
        aim = Window:AddTab('Aim'), 
        combat = Window:AddTab('Combat'), 
        visuals = Window:AddTab('Visuals'), 
        ['local'] = Window:AddTab('Local'), 
        world = Window:AddTab('World'), 
        ui_settings = Window:AddTab('UI Settings'),
    }

    --//Sections\\--
    local sections = {
        aim = {
            aim = tabs.aim:AddLeftGroupbox('Aim'),
            silent_aim = tabs.aim:AddRightGroupbox('Silent Aim'),
            aimbot = tabs.aim:AddRightGroupbox('Aimbot'),
        },
        combat = {
            anti_aim = tabs.combat:AddLeftGroupbox('Anti-Aim'),
            hitbox_expander = tabs.combat:AddLeftGroupbox('Hitbox Expander'),
            weapon_modifications = tabs.combat:AddRightGroupbox('Weapon Modifications'),
            killaura = tabs.combat:AddRightGroupbox('Killaura'),
        },

        visuals = {
            player_esp = tabs.visuals:AddLeftGroupbox('Player ESP'),
            sleeper_esp = tabs.visuals:AddRightGroupbox('Sleeper ESP'),
            esp_settings = tabs.visuals:AddRightGroupbox('ESP Settings'),
        },

        ['local'] = {
            fov_changer = tabs['local']:AddLeftGroupbox('FOV Changer'),
            crosshair = tabs['local']:AddLeftGroupbox('Crosshair'),
            local_chams = tabs['local']:AddRightGroupbox('Local Chams'),
            arms_offset = tabs['local']:AddLeftGroupbox('Arms Offset'),
            hit = tabs['local']:AddRightGroupbox('Hit'),
            misc = tabs['local']:AddLeftGroupbox('Misc'),
            zoom = tabs['local']:AddRightGroupbox('Zoom'),
        },

        world = {
            xray = tabs.world:AddLeftGroupbox('Xray'),
            hitsound = tabs.world:AddRightGroupbox('Hitsound'),
            resolver = tabs.world:AddLeftGroupbox('Spin Resolver'),
            misc = tabs.world:AddLeftGroupbox('Misc'),
        },

        ui_settings = {
            info = tabs.ui_settings:AddRightGroupbox('Info'),
        },
    }

    --//Aimbot
    do
        --//Aim
        do
            sections.aim.aim:AddDropdown('aim_part',{Values = {'Head', 'UpperTorso', 'LowerTorso', 'RightLowerArm', 'LeftLowerArm', 'LeftLowerLeg', 'RightLowerLeg'}, Default = 1, Multi = false, Text = 'Aimpart',})
            sections.aim.aim:AddToggle('aim_prediction', {Text = 'Prediction', Default = false, Tooltip = nil,})
            sections.aim.aim:AddToggle('aim_vis_check', {Text = 'Visible Check', Default = false, Tooltip = nil,})
            sections.aim.aim:AddToggle('aim_limit_distance', {Text = 'Limit Distance', Default = false, Tooltip = nil,})
            sections.aim.aim:AddSlider('aim_limit_distance_value', {Default = 2000, Min = 0, Max = 2000, Rounding = 0, Compact = false, Tooltip = 'Max studs for locking on to someone', Suffix = ' studs',})
            sections.aim.aim:AddToggle('aim_highlight_target', {Text = 'Hightlight Target', Default = false, Tooltip = nil,}):AddColorPicker('aim_highlight_target_colour',{Default = color3_fromrgb(255, 0, 0), Title = 'Highlight Colour',})
            sections.aim.aim:AddToggle('aim_snaplines', {Text = 'Snaplines', Default = false, Tooltip = nil,}):AddColorPicker('aim_snaplines_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Snapline Colour',})
            sections.aim.aim:AddToggle('aim_dynamic_fov', {Text = 'Dynamic FOV', Default = true, Tooltip = nil,})
            sections.aim.aim:AddToggle('aim_draw_fov', {Text = 'Draw FOV', Default = false, Tooltip = nil,}):AddColorPicker('aim_draw_fov_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'FOV Colour',})
            sections.aim.aim:AddSlider('aim_fov_size',{Text = 'FOV Size', Default = 100, Min = 0, Max = 1000, Rounding = 0, Compact = false, Suffix = 'px',})
        end

        --//Aimbot
        do
            sections.aim.aimbot:AddToggle('aimbot', {Text = 'Aimbot', Default = false, Tooltip = nil,}):AddKeyPicker('aimbot_key',{Default = 'MB2', NoUI = true, Text = nil, Mode = 'Hold'})
            sections.aim.aimbot:AddSlider('aimbot_smoothing',{Text = 'Smoothing', Default = 1, Min = 1, Max = 10, Rounding = 0, Compact = false, Suffix = 'px',})
        end

        --//Silent Aim
        do
            sections.aim.silent_aim:AddToggle('silent_aim', {Text = 'Silent Aim', Default = false, Tooltip = nil,})
            sections.aim.silent_aim:AddSlider('silent_hitchance',{Text = 'Hitchance', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%', TextType = 'ontop',})
        end


    end

    --//Combat
    do
        --//Weapon Modifications
        do
            sections.combat.weapon_modifications:AddSlider('recoil_percentage',{Text = 'Recoil', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%', TextType = 'ontop',})
            sections.combat.weapon_modifications:AddSlider('spread_percentage',{Text = 'Spread', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%', TextType = 'ontop',})
            sections.combat.weapon_modifications:AddToggle('overide_firetype', {Text = 'Overide Firetype', Default = false, Tooltip = nil,})
            sections.combat.weapon_modifications:AddDropdown('firetype',{Values = {'Automatic', 'Semi-Automatic'}, Default = 1, Multi = false, Text = 'Firetype',})
            sections.combat.weapon_modifications:AddToggle('overide_hitbox', {Text = 'Overide Hitbox', Default = false, Tooltip = nil,})
            sections.combat.weapon_modifications:AddSlider('overide_hitbox_chance',{Text = 'Overide Chance', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%', TextType = 'ontop',})
            sections.combat.weapon_modifications:AddDropdown('overide_hitbox_part',{Values = {'Head', 'UpperTorso', 'LowerTorso', 'RightLowerArm', 'LeftLowerArm', 'LeftLowerLeg', 'RightLowerLeg'}, Default = 1, Multi = false, Text = 'Hitbox',})
        end

        --//Anti Aim
        do
            sections.combat.anti_aim:AddToggle('anti_aim', {Text = 'Anti-Aim', Default = false, Tooltip = nil,}):AddKeyPicker('anti_aim_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.combat.anti_aim:AddDropdown('anti_aim_pitch_type',{Values = {'None', 'Up', 'Down', 'Random', 'Custom'}, Default = 3, Multi = false, Text = 'Pitch Type',})
            sections.combat.anti_aim:AddSlider('anti_aim_custom_pitch',{Text = 'Custom Pitch', Default = 15, Min = 0, Max = 30, Rounding = 0, Compact = false, Suffix = '°',})
            sections.combat.anti_aim:AddDropdown('anti_aim_yaw_type',{Values = {'None', 'Zero', 'Jitter', 'Random', 'Custom'}, Default = 3, Multi = false, Text = 'Yaw Type',})
            sections.combat.anti_aim:AddSlider('anti_aim_custom_yaw',{Text = 'Custom Yaw', Default = 30, Min = 0, Max = 60, Rounding = 0, Compact = false, Suffix = '°',})
            sections.combat.anti_aim:AddToggle('anti_aim_crouch', {Text = 'Force Crouch Stance', Default = true, Tooltip = nil,})
        end

        --//Hitbox Expander
        do
            sections.combat.hitbox_expander:AddToggle('hitbox_expander', {Text = 'Hitbox Expander', Default = false, Tooltip = nil,}):AddKeyPicker('hitbox_expander_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.combat.hitbox_expander:AddSlider('hitbox_width',{Text = 'Hitbox Width', Default = 3.6, Min = 1, Max = 4.5, Rounding = 1, Compact = false, Suffix = ' studs',})
            sections.combat.hitbox_expander:AddSlider('hitbox_height',{Text = 'Hitbox Height', Default = 8.6, Min = 1, Max = 9, Rounding = 1, Compact = false, Suffix = ' studs',})
            sections.combat.hitbox_expander:AddSlider('hitbox_transparency',{Text = 'Hitbox Transparency', Default = 100, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%',})
        end

        --//Killaura
        do
            sections.combat.killaura:AddToggle('killaura', {Text = 'Killaura (Coming Soon)', Default = false, Tooltip = nil,})
            sections.combat.killaura:AddSlider('killaura_distance',{Text = 'Distance', Default = 8, Min = 3, Max = 12, Rounding = 1, Compact = false, Suffix = ' studs',})
            sections.combat.killaura:AddToggle('killaura_auto_swing', {Text = 'Auto Swing', Default = true, Tooltip = nil,})
            sections.combat.killaura:AddToggle('killaura_visualise_distance', {Text = 'Visualise Distance', Default = false, Tooltip = nil,})
        end
    end

    --//Visuals
    do
        --//Player Esp
        do
            sections.visuals.player_esp:AddToggle('player_esp', {Text = 'Enabled', Default = false, Tooltip = nil,}):AddKeyPicker('player_esp_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.visuals.player_esp:AddToggle('player_box', {Text = 'Box', Default = false, Tooltip = nil,}):AddColorPicker('player_box_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Box Colour'})
            sections.visuals.player_esp:AddDropdown('player_box_type',{Values = {'Full', 'Corner'}, Default = 1, Multi = false, Text = 'Box Type',})
            sections.visuals.player_esp:AddToggle('player_box_chams', {Text = 'Chams', Default = false, Tooltip = nil,}):AddColorPicker('player_box_chams_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Chams Colour'})
            sections.visuals.player_esp:AddSlider('player_chams_transparency',{Text = 'Chams Transparency', Default = 90, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%',})
            --text shit
            sections.visuals.player_esp:AddToggle('player_name', {Text = 'Name', Default = false, Tooltip = nil,}):AddColorPicker('player_name_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Name Colour'})
            sections.visuals.player_esp:AddToggle('player_weapon', {Text = 'Weapon', Default = false, Tooltip = nil,}):AddColorPicker('player_weapon_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Weapon Colour'})
            sections.visuals.player_esp:AddToggle('player_distance', {Text = 'Distance', Default = false, Tooltip = nil,}):AddColorPicker('player_distance_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Distance Colour'})
        end

        --//Sleeper Esp
        do
            sections.visuals.sleeper_esp:AddToggle('sleeper_esp', {Text = 'Enabled', Default = false, Tooltip = nil,}):AddKeyPicker('sleeper_esp_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.visuals.sleeper_esp:AddToggle('sleeper_box', {Text = 'Box', Default = false, Tooltip = nil,}):AddColorPicker('sleeper_box_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Box Colour'})
            sections.visuals.sleeper_esp:AddDropdown('sleeper_box_type',{Values = {'Full', 'Corner'}, Default = 1, Multi = false, Text = 'Box Type',})
            sections.visuals.sleeper_esp:AddToggle('sleeper_box_chams', {Text = 'Chams', Default = false, Tooltip = nil,}):AddColorPicker('sleeper_box_chams_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Chams Colour'})
            sections.visuals.sleeper_esp:AddSlider('sleeper_chams_transparency',{Text = 'Chams Transparency', Default = 90, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%',})
            --text shit
            sections.visuals.sleeper_esp:AddToggle('sleeper_name', {Text = 'Name', Default = false, Tooltip = nil,}):AddColorPicker('sleeper_name_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Name Colour'})
            sections.visuals.sleeper_esp:AddToggle('sleeper_distance', {Text = 'Distance', Default = false, Tooltip = nil,}):AddColorPicker('sleeper_distance_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Distance Colour'})
        end

        --//ESP Settings
        do
            sections.visuals.esp_settings:AddSlider('esp_max_distance',{Text = 'Max Distance', Default = 0, Min = 0, Max = 2500, Rounding = 0, Compact = false, Suffix = ' studs', Tooltip = '0 = No Limit', })
            sections.visuals.esp_settings:AddSlider('esp_text_size',{Text = 'Text Size', Default = 13, Min = 5, Max = 25, Rounding = 0, Compact = false, Suffix = '',})
            sections.visuals.esp_settings:AddDropdown('esp_text_font',{Values = {'System', 'Plex', 'Monospace'}, Default = 2, Multi = false, Text = 'Text Font',})
            sections.visuals.esp_settings:AddToggle('esp_text_outline', {Text = 'Text Outline', Default = true, Tooltip = nil,})
            sections.visuals.esp_settings:AddToggle('box_outline', {Text = 'Box Outline', Default = true, Tooltip = nil,})
        end
    end
    --//Local
    do
        --//FOV Changer 
        do
            sections['local'].fov_changer:AddToggle('fov_changer', {Text = 'FOV Changer', Default = false, Tooltip = nil,}):AddKeyPicker('fov_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections['local'].fov_changer:AddSlider('fov_amount',{Text = '', Default = 70, Min = 0, Max = 120, Rounding = 0, Compact = false, Suffix = '°',})
        end
        --//Crosshair
        do
            sections['local'].crosshair:AddToggle('crosshair', {Text = 'Crosshair', Default = false, Tooltip = nil,}):AddColorPicker('crosshair_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Crosshair Colour'})
            sections['local'].crosshair:AddToggle('crosshair_filled', {Text = 'Filled', Default = true, Tooltip = nil,})
            sections['local'].crosshair:AddSlider('crosshair_size',{Text = 'Size', Default = 2, Min = 1, Max = 10, Rounding = 1, Compact = false, Suffix = 'px',})
        end
        --//Local Chams
        do
            sections['local'].local_chams:AddToggle('arm_chams', {Text = 'Arm Chams', Default = false, Tooltip = nil,}):AddColorPicker('arm_chams_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Colour'})
            sections['local'].local_chams:AddDropdown('arm_chams_material', {Values = {'Plastic', 'SmoothPlastic', 'Neon', 'Wood', 'WoodPlanks', 'Marble', 'Basalt', 'Slate', 'CrackedLava', 'Concrete', 'Limestone', 'Granite', 'Pavement', 'Brick', 'Pebble', 'Cobblestone', 'Rock', 'Sandstone', 'CorrodedMetal', 'DiamondPlate', 'Foil', 'Metal', 'Grass', 'LeafyGrass', 'Sand', 'Fabric', 'Snow', 'Mud', 'Ground', 'Asphalt', 'Salt', 'Ice', 'Glacier', 'Glass', 'ForceField'}, Default = 35, Multi = false, Text = 'Material',})
            sections['local'].local_chams:AddToggle('weapon_chams', {Text = 'Weapon Chams', Default = false, Tooltip = nil,}):AddColorPicker('weapon_chams_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Colour'})
            sections['local'].local_chams:AddDropdown('weapon_chams_material', {Values = {'Plastic', 'SmoothPlastic', 'Neon', 'Wood', 'WoodPlanks', 'Marble', 'Basalt', 'Slate', 'CrackedLava', 'Concrete', 'Limestone', 'Granite', 'Pavement', 'Brick', 'Pebble', 'Cobblestone', 'Rock', 'Sandstone', 'CorrodedMetal', 'DiamondPlate', 'Foil', 'Metal', 'Grass', 'LeafyGrass', 'Sand', 'Fabric', 'Snow', 'Mud', 'Ground', 'Asphalt', 'Salt', 'Ice', 'Glacier', 'Glass', 'ForceField'}, Default = 35, Multi = false, Text = 'Material',})
        end
        --//Arms Offset
        do
            sections['local'].arms_offset:AddToggle('arm_offset', {Text = 'Arms Offset', Default = false, Tooltip = nil,})
            sections['local'].arms_offset:AddSlider('arm_offset_x',{Text = 'x Offset', Default = 0, Min = -10, Max = 10, Rounding = 1, Compact = false, Suffix = ' studs' ,TextType = 'ontop',})
            sections['local'].arms_offset:AddSlider('arm_offset_y',{Text = 'y Offset', Default = 0, Min = -10, Max = 10, Rounding = 1, Compact = false, Suffix = ' studs', TextType = 'ontop',})
            sections['local'].arms_offset:AddSlider('arm_offset_z',{Text = 'z Offset', Default = 0, Min = -10, Max = 10, Rounding = 1, Compact = false, Suffix = ' studs', TextType = 'ontop',})
        end

        --//Hit
        do
            sections['local'].hit:AddToggle('bullet_beams', {Text = 'Bullet Tracers', Default = false, Tooltip = nil,}):AddColorPicker('beam_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Tracer Colour'})
            sections['local'].hit:AddSlider('beam_lifetime',{Text = 'Tracer Lifetime', Default = 1, Min = 0.1, Max = 10, Rounding = 1, Compact = true, Suffix = 's', TextType = 'ontop',})

            sections['local'].hit:AddToggle('hit_logs', {Text = 'Hit Logs', Default = false, Tooltip = nil,})
            sections['local'].hit:AddDropdown('logs_text',{Values = {'Distance', 'Hitpart', 'Both'}, Default = 3, Multi = false, Text = 'Log Information',})
            sections['local'].hit:AddSlider('log_lifetime',{Text = 'Log Lifetime', Default = 1, Min = 0.1, Max = 10, Rounding = 1, Compact = true, Suffix = 's', TextType = 'ontop',})

            sections['local'].hit:AddToggle('hit_markers', {Text = 'Hit Markers', Default = false, Tooltip = nil,}):AddColorPicker('marker_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Marker Colour'})
            sections['local'].hit:AddSlider('markers_lifetime',{Text = 'Marker Lifetime', Default = 1, Min = 0.1, Max = 10, Rounding = 1, Compact = true, Suffix = 's', TextType = 'ontop',})
        end

        --//Zoom
        do
            sections['local'].zoom:AddToggle('zoom', {Text = 'Zoom', Default = false, Tooltip = nil,}):AddKeyPicker('zoom_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Hold' })
            sections['local'].zoom:AddSlider('zoom_fov',{Text = 'Zoom FOV', Default = 35, Min = 0, Max = 120, Rounding = 0, Compact = true, Suffix = '°', TextType = 'ontop',})
        end

        --//Misc
        do
            sections['local'].misc:AddToggle('remove_blood', {Text = 'Remove Blood', Default = false, Tooltip = 'Removes blood effects from your screen (Dont recommend)',})
            sections['local'].misc:AddToggle('always_grounded', {Text = 'Always Grounded', Default = false, Tooltip = 'Makes the server think your on the ground',})
            sections['local'].misc:AddLabel('Loot All'):AddKeyPicker('loot_all', {Default = 'None', SyncToggleState = false, Mode = 'Toggle', Text = '', NoUI = false, Tooltip = 'Spamming this may kick you'})
        end
    end

    --//World
    do
        --//Xray
        do
            sections.world.xray:AddToggle('xray', {Text = 'XRay', Default = false, Tooltip = nil,}):AddKeyPicker('xray_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.world.xray:AddSlider('xray_transparency',{Text = 'Transparency', Default = 70, Min = 0, Max = 100, Rounding = 0, Compact = false, Suffix = '%',})
        end
        --//Spin Resolver
        do
            sections.world.resolver:AddToggle('spin_resolver', {Text = 'Spin Resolver', Default = false, Tooltip = nil,}):AddKeyPicker('spin_resolver_keybind', { Default = 'None', NoUI = true, Text = nil, Mode = 'Toggle' })
            sections.world.resolver:AddToggle('pitch_resolver', {Text = 'Resolve Pitch', Default = true, Tooltip = nil,})
            sections.world.resolver:AddToggle('yaw_resolver', {Text = 'Resolve Yaw', Default = false, Tooltip = nil,})
            sections.world.resolver:AddToggle('crouch_resolver', {Text = 'Resolve Crouch', Default = true, Tooltip = nil,})
        end
        --//Misc
        do
            sections.world.misc:AddToggle('custom_ambient', {Text = 'Custom Ambient', Default = false, Tooltip = nil,}):AddColorPicker('custom_ambient_colour',{Default = color3_fromrgb(255, 255, 255), Title = 'Ambient'})
            sections.world.misc:AddToggle('remove_fog', {Text = 'Remove Fog', Default = false, Tooltip = nil,})
            sections.world.misc:AddToggle('remove_grass', {Text = 'Remove Grass', Default = false, Tooltip = nil,})
            sections.world.misc:AddToggle('remove_shadows', {Text = 'Remove Shadows', Default = false, Tooltip = nil,})
        end
        --//Hitsounds
        do
            sections.world.hitsound:AddLabel('BELOW COMING SOON')
            sections.world.hitsound:AddLabel('')
            sections.world.hitsound:AddDropdown('head_hitsound',{Values = {'Default', 'Rust Headshot', 'Minecraft Hit', 'COD Hit', 'Osu', 'Skeet', 'Custom'}, Default = 1, Multi = false, Text = 'Head Hitsound',})
            sections.world.hitsound:AddSlider('head_hit_volume',{Text = 'Volume', Default = 4, Min = 1, Max = 10, Rounding = 0, Compact = false, Suffix = '', TextType = 'ontop',})
            sections.world.hitsound:AddInput('head_hit_custom', {Default = nil, Numeric = true, Finished = true, Text = 'Custom Sound', Placeholder = 'rbxassetid:// ...',})

            sections.world.hitsound:AddDropdown('body_hitsound',{Values = {'Default', 'Rust Headshot', 'Minecraft Hit', 'COD Hit', 'Osu', 'Skeet', 'Custom'}, Default = 1, Multi = false, Text = 'Body Hitsound',})
            sections.world.hitsound:AddSlider('body_hit_volume',{Text = 'Volume', Default = 4, Min = 1, Max = 10, Rounding = 0, Compact = false, Suffix = '', TextType = 'ontop',})
            sections.world.hitsound:AddInput('body_hit_custom', {Default = nil, Numeric = true, Finished = true, Text = 'Custom Sound', Placeholder = 'rbxassetid:// ...',})
            
            sections.world.hitsound:AddDropdown('tree_hitsound',{Values = {'Default', 'Rust Headshot', 'Minecraft Hit', 'COD Hit', 'Osu', 'Skeet', 'Custom'}, Default = 1, Multi = false, Text = 'Tree Hitsound',})
            sections.world.hitsound:AddSlider('tree_hit_volume',{Text = 'Volume', Default = 4, Min = 1, Max = 10, Rounding = 0, Compact = false, Suffix = '', TextType = 'ontop',})
            sections.world.hitsound:AddInput('tree_hit_custom', {Default = nil, Numeric = true, Finished = true, Text = 'Custom Sound', Placeholder = 'rbxassetid:// ...',})

            sections.world.hitsound:AddDropdown('node_hitsound',{Values = {'Default', 'Rust Headshot', 'Minecraft Hit', 'COD Hit', 'Osu', 'Skeet', 'Custom'}, Default = 1, Multi = false, Text = 'Node Hitsound',})
            sections.world.hitsound:AddSlider('node_hit_volume',{Text = 'Volume', Default = 4, Min = 1, Max = 10, Rounding = 0, Compact = false, Suffix = '', TextType = 'ontop',})
            sections.world.hitsound:AddInput('node_hit_custom', {Default = nil, Numeric = true, Finished = true, Text = 'Custom Sound', Placeholder = 'rbxassetid:// ...',})
        end
    end

    --//UI Settings
    do
        --//Info
        do
            sections.ui_settings.info:AddToggle('watermark', {Text = 'Watermark', Default = true})
            sections.ui_settings.info:AddButton('Unload',function()
                Library:Unload()
                Library.Unloaded = true 
            end)
            sections.ui_settings.info:AddLabel('Menu Keybind'):AddKeyPicker('MenuKeybind',{Default = 'RightShift', NoUI = true, Text = 'Menu keybind'})
            sections.ui_settings.info:AddLabel('')
            Library.ToggleKeybind = Options.MenuKeybind
        end
        --//Theme Manager
        do
            ThemeManager:SetLibrary(Library)
            ThemeManager:SetFolder('mainstreamed')
            ThemeManager:ApplyToTab(tabs.ui_settings)
        end
        --//Save manager
        do 
            SaveManager:SetLibrary(Library)
            SaveManager:IgnoreThemeSettings() 
            SaveManager:SetFolder('mainstreamed/beta/tridentsurvival')
            SaveManager:BuildConfigSection(tabs.ui_settings)
        end
    end

    --//Functions
    local function worldtoviewport(position, offsetx, offsety)
        offsetx = offsetx or 0
        offsety = offsety or 0
        local screen_pos, on_screen = camera:WorldToViewportPoint(position)
        return vector2_new(screen_pos.X + offsetx, screen_pos.Y + offsety), on_screen, screen_pos.Z
    end

    local function worldtoscreenpoint(position, offsetx, offsety)
        offsetx = offsetx or 0
        offsety = offsety or 0
        local screen_pos, on_screen = camera:WorldToScreenPoint(position)
        return vector2_new(screen_pos.X + offsetx, screen_pos.Y + offsety), on_screen, screen_pos.Z
    end
]]
